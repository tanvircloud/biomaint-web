@page "/auth/login"
@layout LoginLayout
@using System.Text.Json
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager Nav
@inject IConfiguration Config
@inject IJSRuntime JS

<div class="d-flex flex-column justify-content-center align-items-center bm-login-wrap bm-login"
     style="min-height:100vh; background:var(--bg);">

  @if (ShowToastUI)
  {
    <div class="bm-toast bm-toast-@ToastKind" role="status" aria-live="assertive">
      <div class="bm-toast-icon"><i class="bi @ToastIcon"></i></div>
      <div class="bm-toast-body">@ToastMessage</div>
      <button type="button" class="bm-toast-close" @onclick="HideToast" aria-label="Close">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
  }

  <div class="bm-login-card bm-anim-fadeup" style="
      width:100%;max-width:380px;padding:40px;
      background:var(--panel);color:var(--text);
      border:1px solid var(--panel-border);border-radius:16px;
      box-shadow:var(--shadow-2);" role="form">

    <!-- Brand -->
    <div style="text-align:center;margin-bottom:25px;">
      <img src="assets/logos/biomaint.svg" alt="BioMaint Logo"
           style="width:48px;height:48px;margin-bottom:12px;display:inline-block;" />
      <h2 style="margin:0;color:var(--accent);">@AppName</h2>
      <p style="color:var(--text-muted);font-size:14px;margin:5px 0 0 0;">@Subtitle</p>
    </div>

    @if (!RequireMfa)
    {
      <!-- Email -->
      <div style="margin-bottom:18px;">
        <label for="email" class="form-label" style="font-weight:600;color:var(--text);">Email *</label>
        <div class="input-group">
          <span class="input-group-text" id="emailIcon"
                style="background:var(--field-chip-bg);border-color:var(--field-border);">
            <i class="bi bi-envelope"></i>
          </span>
          <input id="email" @bind="Email" type="email" class="form-control"
                 style="background:var(--field-bg);color:var(--text);border-color:var(--field-border);"
                 autocomplete="username" aria-describedby="emailIcon" required />
        </div>
        @if (!string.IsNullOrEmpty(EmailError))
        {
          <div class="validation-message" role="alert">@EmailError</div>
        }
      </div>

      <!-- Password -->
      <div style="margin-bottom:18px;">
        <label for="password" class="form-label" style="font-weight:600;color:var(--text);">Password *</label>
        <div class="input-group" style="margin-top:5px;">
          <input id="password" type="@(_obscure ? "password" : "text")" @bind="Password" class="form-control"
                 style="background:var(--field-bg);color:var(--text);border-color:var(--field-border);"
                 autocomplete="current-password" required minlength="8" />
          <button @onclick="ToggleObscure" type="button" class="btn btn-outline-secondary" title="@ToggleTitle"
                  aria-label="@ToggleTitle"
                  style="border-color:var(--field-border);background:var(--field-chip-bg);color:var(--text);">
            <i class="bi @ToggleIcon"></i>
          </button>
        </div>
        @if (!string.IsNullOrEmpty(PasswordError))
        {
          <div class="validation-message" role="alert">@PasswordError</div>
        }
      </div>

      <!-- Remember Me -->
      <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="remember" @bind="RememberMe" />
        <label class="form-check-label" for="remember" style="color:var(--text);">
          Remember me
        </label>
      </div>

      <!-- Cloudflare Turnstile: full width when flexible; left align when fixed -->
      <div class="mb-1">
        <div id="cf-turnstile" class="cf-host" aria-live="polite"></div>
      </div>

      <!-- Status line (visible toggle) -->
      @if (ShowCaptchaStatusUI)
      {
        <div class="d-flex justify-content-between align-items-center mb-3" aria-live="polite">
          <small class="@CaptchaStatusCss">@CaptchaStatus</small>
        </div>
      }
      else
      {
        <!-- Keep for screen readers only -->
        <small class="visually-hidden" aria-live="polite">@CaptchaStatus</small>
      }

      <p style="color:var(--text-muted);font-size:12px;margin:0 0 12px 0;">
        By logging in, you agree to BioMaint’s
        <a href="/terms" style="color:var(--accent);text-decoration:none;">Terms of Use</a>
        and
        <a href="/privacy" style="color:var(--accent);text-decoration:none;">Privacy Policy</a>.
      </p>
    }
    else
    {
      <!-- MFA Step -->
      <div style="margin-bottom:18px;">
        <label for="mfa" class="form-label" style="font-weight:600;color:var(--text);">Enter MFA Code *</label>
        <input id="mfa" @bind="MfaCode" type="text" class="form-control"
               style="background:var(--field-bg);color:var(--text);border-color:var(--field-border);" inputmode="numeric"
               maxlength="6" autocomplete="one-time-code" />
      </div>
    }

    <!-- Submit -->
    <button @onclick="Submit"
            disabled="@(IsLoading || IsCaptchaVerifying || !CaptchaHasToken)"
            class="btn w-100" style="
              padding:14px;
              background:var(--accent);color:var(--accent-contrast);
              border:none;border-radius:8px;font-size:16px;font-weight:600;
              cursor:pointer;transition:background .2s ease;">
      @if (IsLoading || IsCaptchaVerifying)
      {
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
      }
      @(
        IsLoading
          ? "Processing..."
          : IsCaptchaVerifying
            ? "Verifying human..."
            : (RequireMfa ? "Verify Code" : "Log In")
       )
    </button>

    @if (!string.IsNullOrEmpty(Error))
    {
      <div class="alert alert-danger text-center mt-3" role="alert">@Error</div>
    }

    @if (!RequireMfa)
    {
      <div style="text-align:center;margin-top:18px;">
        <a href="/forgot-password" style="color:var(--accent);text-decoration:none;font-size:14px;">
          Forgot your password?
        </a>
      </div>
    }
  </div>
</div>

<style>
  /* Host for Turnstile. No input look. */
  .cf-host{
    width:100%;
    display:flex;
    justify-content:flex-start;   /* left align when widget has fixed width */
    align-items:center;
  }
  /* When flexible is supported, help it stretch to the container */
  .cf-host.cf-flex iframe{ width:100% !important; max-width:100% !important; }

  /* Subtle status colors */
  .text-muted-strong { color: var(--text-muted); font-weight: 500; }
  .text-ok { color: var(--accent); }
  .text-warn { color: #d9534f; }
</style>

@code {
  private string AppName = "BioMaint";
  private string Subtitle = "Log in to simplify tasks";

  private string Email = "";
  private string Password = "";
  private string MfaCode = "";
  private bool RememberMe = false;
  private bool _obscure = true;

  private bool IsLoading = false;
  private bool IsCaptchaVerifying = false;

  private bool CaptchaHasToken = false;                 // live token presence
  private bool ShowCaptchaStatusUI = false;             // <-- toggle visibility of the status line
  private string CaptchaStatus = "Awaiting verification";
  private string CaptchaStatusCss => CaptchaStatus switch
  {
    "Verified" => "text-ok",
    "Verifying…" => "text-muted-strong",
    _ => "text-muted"
  };

  private string? EmailError;
  private string? PasswordError;
  private string? Error;
  private bool RequireMfa = false;

  // Turnstile
  private string TurnstileSiteKey => Config["Turnstile:SiteKey"] ?? "";

  // Toast state
  private bool ShowToastUI = false;
  private string ToastMessage = "";
  private string ToastKind = "danger"; // danger | info | success
  private string ToastIcon => ToastKind switch
  {
    "success" => "bi-check-circle",
    "info" => "bi-info-circle",
    _ => "bi-exclamation-triangle"
  };

  private string _returnUrl = "/app/dashboard";

  private string ApiBase => ((Config["ApiBaseUrl"] ?? "https://biomaint.com/").TrimEnd('/') + "/");
  private string LoginUrl => $"{ApiBase}api/auth/login";
  private string VerifyMfaUrl => $"{ApiBase}api/auth/verify-mfa";

  private static readonly System.Text.RegularExpressions.Regex EmailPattern =
      new(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$",
          System.Text.RegularExpressions.RegexOptions.Compiled | System.Text.RegularExpressions.RegexOptions.IgnoreCase);

  private DotNetObjectReference<Login>? _selfRef; // for JS -> .NET callbacks

  protected override void OnInitialized()
  {
    _returnUrl = GetQueryParam(Nav.Uri, "returnUrl") ?? "/app/dashboard";
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && !RequireMfa)
    {
      try
      {
        if (string.IsNullOrWhiteSpace(TurnstileSiteKey))
        {
          ShowToast("Missing Turnstile site key. Set Turnstile:SiteKey in configuration.", "danger");
          return;
        }

        CaptchaHasToken = false;
        CaptchaStatus = "Awaiting verification";

        _selfRef ??= DotNetObjectReference.Create(this);

        await JS.InvokeVoidAsync("BioMaintLogin.destroy");
        await JS.InvokeVoidAsync("BioMaintLogin.init", TurnstileSiteKey, "cf-turnstile", _selfRef);
      }
      catch
      {
        // script loads async; we'll retry on submit if needed
      }
      finally
      {
        await InvokeAsync(StateHasChanged);
      }
    }
  }

  public async ValueTask DisposeAsync()
  {
    try { await JS.InvokeVoidAsync("BioMaintLogin.destroy"); } catch { }
    _selfRef?.Dispose();
  }

  [JSInvokable] // JS notifies us: rendered / token / expired / error / reset
  public Task OnCaptchaStatus(string evt)
  {
    switch (evt)
    {
      case "rendered":
        CaptchaHasToken = false;
        CaptchaStatus = "Awaiting verification";
        break;
      case "token":
        CaptchaHasToken = true;
        CaptchaStatus = "Verified";
        break;
      case "expired":
        CaptchaHasToken = false;
        CaptchaStatus = "Awaiting verification";
        break;
      case "error":
        CaptchaHasToken = false;
        CaptchaStatus = "Verification error. Please retry.";
        break;
      case "reset":
        CaptchaHasToken = false;
        CaptchaStatus = "Awaiting verification";
        break;
    }
    StateHasChanged();
    return Task.CompletedTask;
  }

  private string ToggleIcon => _obscure ? "bi-eye" : "bi-eye-slash";
  private string ToggleTitle => _obscure ? "Show password" : "Hide password";
  private void ToggleObscure() => _obscure = !_obscure;

  private async Task Submit()
  {
    if (IsCaptchaVerifying) return;

    if (!RequireMfa)
    {
      EmailError = string.IsNullOrWhiteSpace(Email) ? "Please enter your email" : null;
      PasswordError = string.IsNullOrWhiteSpace(Password) ? "Please enter your password" : null;

      if (EmailError is null && !EmailPattern.IsMatch(Email))
        EmailError = "Please enter a valid email address";

      if (PasswordError is null && Password.Length < 8)
        PasswordError = "Password must be at least 8 characters long";

      if (EmailError != null || PasswordError != null)
        return;
    }
    else if (string.IsNullOrWhiteSpace(MfaCode))
    {
      ShowToast("Please enter the MFA code.", "danger");
      return;
    }

    // If user clicks too early, guide them
    if (!RequireMfa && !CaptchaHasToken)
    {
      ShowToast("Please complete the human verification.", "danger");
      return;
    }

    IsCaptchaVerifying = !RequireMfa;
    if (IsCaptchaVerifying)
    {
      CaptchaStatus = "Verifying…";
      await InvokeAsync(StateHasChanged);
    }

    IsLoading = true;
    Error = null;

    try
    {
      using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));

      if (!RequireMfa)
      {
        var captchaToken = await JS.InvokeAsync<string>("BioMaintLogin.getOrWaitToken", 7000);
        IsCaptchaVerifying = false;

        if (string.IsNullOrWhiteSpace(captchaToken))
        {
          CaptchaStatus = "Still solving or expired. Please complete the challenge.";
          ShowToast("Please complete the human verification.", "danger");
          return;
        }

        CaptchaStatus = "Verified";

        var payload = new
        {
          email = Email,
          password = Password,
          rememberMe = RememberMe,
          captchaToken = captchaToken
        };

        var resp = await Http.PostAsJsonAsync(LoginUrl, payload, cts.Token);

        if (resp.StatusCode == System.Net.HttpStatusCode.Forbidden)
        {
          RequireMfa = true;
          ShowToast("Multi-factor authentication required. Check your authenticator app.", "info");
          return;
        }

        if (!resp.IsSuccessStatusCode)
        {
          ShowToast("We couldn’t log you in. Check your details and try again.", "danger");
          try { await JS.InvokeVoidAsync("BioMaintLogin.reset"); } catch { }
          CaptchaHasToken = false;
          CaptchaStatus = "Awaiting verification";
          return;
        }

        ShowToast("Welcome back!", "success");
        Nav.NavigateTo(_returnUrl, forceLoad: true);
      }
      else
      {
        var payload = new { email = Email, code = MfaCode };
        var resp = await Http.PostAsJsonAsync(VerifyMfaUrl, payload, cts.Token);

        if (!resp.IsSuccessStatusCode)
        {
          ShowToast("Invalid MFA code.", "danger");
          return;
        }

        ShowToast("Verified!", "success");
        Nav.NavigateTo(_returnUrl, forceLoad: true);
      }
    }
    catch (TaskCanceledException)
    {
      ShowToast("Request timed out. Please try again.", "danger");
    }
    catch (HttpRequestException)
    {
      ShowToast("Cannot reach the API. In development, enable CORS for http://localhost and check ApiBaseUrl.", "danger");
    }
    catch
    {
      ShowToast("Server unavailable. Try again later.", "danger");
    }
    finally
    {
      IsCaptchaVerifying = false;
      IsLoading = false;
    }
  }

  private void ShowToast(string message, string kind = "danger")
  {
    ToastMessage = message;
    ToastKind = kind;
    ShowToastUI = true;
    _ = AutoHideToastAsync();
  }

  private async Task AutoHideToastAsync()
  {
    try
    {
      await Task.Delay(4000);
      ShowToastUI = false;
      await InvokeAsync(StateHasChanged);
    }
    catch { }
  }

  private void HideToast() => ShowToastUI = false;

  private static string? GetQueryParam(string uri, string key)
  {
    var qIndex = uri.IndexOf('?', StringComparison.Ordinal);
    if (qIndex < 0) return null;
    var query = uri[(qIndex + 1)..];
    foreach (var part in query.Split('&', StringSplitOptions.RemoveEmptyEntries))
    {
      var kv = part.Split('=', 2);
      if (Uri.UnescapeDataString(kv[0]) == key)
        return kv.Length > 1 ? Uri.UnescapeDataString(kv[1]) : "";
    }
    return null;
  }

  private sealed record LoginResponse(string AccessToken);
}
