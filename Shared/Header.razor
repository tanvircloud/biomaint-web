@using WebApp.Models
@inject WebApp.Services.ContentService Content
@inject IJSRuntime JS

<nav class="navbar navbar-expand-lg sticky-top">
  <div class="container">
    <!-- Brand -->
    <a class="navbar-brand fw-bold d-flex align-items-center gap-2"
       href="@NormalizeHref(_cfg?.Brand?.Href)" aria-label="BioMaint Home">
      <img src="assets/logos/BioMaint.svg"
           alt="BioMaint Logo"
           width="28" height="28"
           decoding="async" />
      <span>@_cfg?.Brand?.Text</span>
    </a>

    <!-- Mobile hamburger -->
    <button id="bmToggler"
            class="navbar-toggler bm-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarNav"
            aria-controls="navbarNav"
            aria-expanded="false"
            aria-label="Toggle navigation">
      <span class="bm-burger"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarNav">
      <!-- LEFT: groups (dropdowns or direct links) -->
      <ul class="navbar-nav me-auto">
        @if (_cfg?.Groups is not null && _cfg.Groups.Count > 0)
        {
          foreach (var g in _cfg.Groups)
          {
            var hasChildren = g.Items is not null && g.Items.Count > 0;
            if (hasChildren)
            {
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle"
                   href="#"
                   data-bs-toggle="dropdown"
                   aria-expanded="false">@g.Label</a>
                <ul class="dropdown-menu">
                  @foreach (var it in g.Items!)
                  {
                    var href = NormalizeHref(it.Href);
                    <li>
                      <a class="dropdown-item"
                         href="@href"
                         target="@(it.External ? "_blank" : null)"
                         rel="@(it.External ? "noopener" : null)">
                        @it.Label
                      </a>
                    </li>
                  }
                </ul>
              </li>
            }
            else if (!string.IsNullOrWhiteSpace(g.Href))
            {
              <li class="nav-item">
                <a class="nav-link" href="@NormalizeHref(g.Href)">@g.Label</a>
              </li>
            }
          }
        }
      </ul>

      <!-- RIGHT: theme dropdown + auth + cta -->
      <div class="d-flex align-items-center gap-2">

        <!-- Theme dropdown (single control) -->
        <div class="dropdown">
          <button id="themeMenuBtn"
                  class="btn btn-outline-light d-flex align-items-center dropdown-toggle"
                  type="button"
                  data-bs-toggle="dropdown"
                  data-bs-display="static"
                  data-bs-boundary="viewport"
                  aria-expanded="false" aria-haspopup="true">
            <i id="themeCurIcon" class="bi bi-moon-stars me-2" aria-hidden="true"></i>
            <span id="themeCurLabel">Auto</span>
          </button>

          <ul id="themeMenu" class="dropdown-menu dropdown-menu-end" aria-labelledby="themeMenuBtn" role="menu">
            <li>
              <button class="dropdown-item d-flex align-items-center"
                      data-mode="light" role="menuitemradio" aria-checked="false">
                <i class="bi bi-sun me-2" aria-hidden="true"></i><span>Light</span>
              </button>
            </li>
            <li>
              <button class="dropdown-item d-flex align-items-center"
                      data-mode="dark" role="menuitemradio" aria-checked="false">
                <i class="bi bi-moon-stars me-2" aria-hidden="true"></i><span>Dark</span>
              </button>
            </li>
            <li>
              <button class="dropdown-item d-flex align-items-center"
                      data-mode="auto" role="menuitemradio" aria-checked="false">
                <i class="bi bi-circle-half me-2" aria-hidden="true"></i><span>Auto</span>
              </button>
            </li>
          </ul>
        </div>

        @if (!string.IsNullOrWhiteSpace(_cfg?.Auth?.LoginHref))
        {
          <a class="btn btn-outline-light" href="@NormalizeHref(_cfg!.Auth!.LoginHref)">
            @_cfg!.Auth!.LoginText
          </a>
        }

        @if (!string.IsNullOrWhiteSpace(_cfg?.Cta?.Href))
        {
          <a class="btn btn-primary" href="@NormalizeHref(_cfg!.Cta!.Href)">
            @_cfg!.Cta!.Text
          </a>
        }
      </div>
    </div>
  </div>
</nav>

@code {
  private HeaderConfig? _cfg;

  protected override async Task OnInitializedAsync()
  {
    try { _cfg = await Content.GetHeaderConfigAsync(); }
    catch { _cfg = null; }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;
    try { await JS.InvokeVoidAsync("BioUI.init"); }
    catch { }
  }

  private static string? NormalizeHref(string? href)
  {
    if (string.IsNullOrWhiteSpace(href)) return href;
    return href.StartsWith("/#") ? href[1..] : href;
  }
}
